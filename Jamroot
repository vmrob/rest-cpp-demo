
rule trim-newline ( str ) {
   return [ MATCH "([^\n]*)" : $(str) ] ;
}

local CFLAGS  = [ trim-newline [ SHELL "needy cflags" ] ] ;
local LDFLAGS = [ trim-newline [ SHELL "needy ldflags" ] ] ;

lib boost_system : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib boost_thread : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib boost_coroutine : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib boost_context : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib boost_filesystem : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib ssl : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

lib crypto : : : :
	<cxxflags>$(CFLAGS)
	<linkflags>$(LDFLAGS)
;

alias simple-web-server : : : : <cxxflags>"--std=c++1y $(CFLAGS)" ;

alias needy-managed-libs :
	boost_system
	boost_thread
	boost_coroutine
	boost_context
	boost_filesystem
	ssl
	crypto
	simple-web-server
;

exe rest-server : [ glob src/*.cpp ] needy-managed-libs :
	<cxxflags>"-fcolor-diagnostics"
;

exe stresser : [ glob tests/*.cpp ] needy-managed-libs :
	<cxxflags>"-fcolor-diagnostics"
;
